///////////////////////////////////////////////////////////
//  ObslugaRaportow.cs
//  Implementation of the Class ObslugaRaportow
//  Generated by Enterprise Architect
//  Created on:      22-Nov-2017 3:41:03 PM
//  Original author: grzes
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using DataServiceLayer.IService;
using DataServiceLayer.Models.View;
using DataBaseLayer;

namespace DataServiceLayer.Service
{
    public class Raporty : IRaporty
    {
        public RaportModel GetRaport(int IdRaportu)
        {
            using (DataBase context = new DataBase())
            {
                var raport = context.Raporties.SingleOrDefault(c => c.IdRaportu == IdRaportu);
                RaportModel model = new RaportModel
                {
                    IdRaportu = raport.IdRaportu,
                    Suma = raport.Suma.Value,
                    DataDo = raport.DataDo.Value,
                    DataOd = raport.DataOd.Value,
                    RachunkiNaRaporcie = new List<RachunkiModel>()
                };
                var Idrachunki = context.Raporty_Rachunki.Where(c => c.IdRaportu == IdRaportu).Select(c => c.IdRachunku);
                foreach(var idRachunek in Idrachunki)
                {
                    var rachunek = context.Rachunkis.SingleOrDefault(c => c.IdRachunku == idRachunek);
                    RachunkiModel rachunekModel = new RachunkiModel
                    {
                        DataRachunku = rachunek.DataRachunku.Value,
                        IdKasjera = rachunek.kasjerID.Value,
                        IdRachunku = rachunek.IdRachunku,
                        NazwaKasjera = rachunek.Kasjer.imie + " " + rachunek.Kasjer.nazwisko,
                        Wysokosc = rachunek.wysokoscRachunku.Value,
                        Sklad = new List<PozycjeModel>()
                    };
                    foreach(var pozycja in rachunek.PozycjeNaRachunkus)
                    {
                        rachunekModel.Sklad.Add(new PozycjeModel
                        {
                            Cena = pozycja.Cena.Value,
                            IdPozycji = pozycja.IdPozycji,
                            IdRachunku = pozycja.IdRachunku.Value,
                            Ilosc = pozycja.Ilosc.Value
                        });
                    }
                    model.RachunkiNaRaporcie.Add(rachunekModel);
                }
                return model;
            }
        }

        public List<RaportModel> GetRaportList()
        {
            List<int> IdRaportow;
            List<RaportModel> model = new List<RaportModel>();
            using (DataBase context = new DataBase())
            {
                IdRaportow = context.Raporties.Select(c=>c.IdRaportu).ToList();
                foreach(var id in IdRaportow)
                {
                    model.Add(GetRaport(id));
                }
            }
            return model;
        }

        public RaportModel Utworz(RaportModel model)
        {
           try
            {
                if (model.DataOd > model.DataDo)
                {
                    return null;
                }
                using (DataBase context = new DataBase())
                {
                    var rachunki = context.Rachunkis.Where(c => c.DataRachunku.Value >= model.DataOd && c.DataRachunku.Value <= model.DataDo);
                    DataBaseLayer.Raporty nowy = context.Raporties.Create();
                    nowy.DataDo = model.DataDo;
                    nowy.DataOd = model.DataOd;
                    nowy.Suma = 0;
                    context.Raporties.Add(nowy);
                    context.SaveChanges();
                    foreach (var rachunek in rachunki)
                    {
                        nowy.Suma += rachunek.wysokoscRachunku;
                        Raporty_Rachunki raporty_Rachunki = context.Raporty_Rachunki.Create();
                        raporty_Rachunki.IdRachunku = rachunek.IdRachunku;
                        raporty_Rachunki.Rachunki = rachunek;
                        raporty_Rachunki.IdRaportu = nowy.IdRaportu;
                        raporty_Rachunki.Raporty = nowy;
                        context.Raporty_Rachunki.Add(raporty_Rachunki);
                    }
                    context.SaveChanges();
                }
                return model;
            }
            catch
            {
                return null;
            }
        }

        public void Usun(int IdRaportu)
        {
            using (DataBase context = new DataBase())
            {
                var raport = context.Raporties.SingleOrDefault(c => c.IdRaportu == IdRaportu);
                context.Raporties.Remove(raport);
                context.SaveChanges();
            }
        }

        public void Edytuj()
        {

        }

    }//end ObslugaRaportow
}