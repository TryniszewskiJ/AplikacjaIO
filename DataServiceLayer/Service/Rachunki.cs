///////////////////////////////////////////////////////////
//  Obs³ugaRachunku.cs
//  Implementation of the Class Obs³ugaRachunku
//  Generated by Enterprise Architect
//  Created on:      22-Nov-2017 3:41:26 PM
//  Original author: grzes
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using DataServiceLayer.IService;
using DataServiceLayer.Models.View;
using DataBaseLayer;
using System.Linq;

namespace DataServiceLayer.Service
{
    public class Rachunki : IRachunki
    {
        public RachunkiModel Dodaj(string masa, string rabat,int IdKasjer)
        {
            try
            {
                var masy = masa.Split(',');
                using (DataBase context = new DataBase())
                {
                    var nowyRachunek = context.Rachunkis.Create();
                    nowyRachunek.DataRachunku = DateTime.Now;
                    nowyRachunek.kasjerID = IdKasjer;
                    nowyRachunek.Kasjer = context.Kasjers.SingleOrDefault(c => c.kasjerID == IdKasjer);
                    int rabatInt = Convert.ToInt32(rabat);
                    nowyRachunek.IdPromocji = context.Promocjas.SingleOrDefault(c => c.WysokscRabatu == rabatInt).promocjaID;
                    nowyRachunek.Promocja = context.Promocjas.SingleOrDefault(c => c.WysokscRabatu == rabatInt);
                    nowyRachunek.wysokoscRachunku = 0;
                    foreach(var mas in masy)
                    {
                        var waga = mas.Replace('.', ',');
                        var pozycja = context.PozycjeNaRachunkus.Create();
                        pozycja.IdRachunku = nowyRachunek.IdRachunku;
                        pozycja.Rachunki = nowyRachunek;
                        pozycja.Ilosc = Convert.ToDouble(waga);
                        pozycja.Cena = Convert.ToDouble(waga) * 3.49;
                        nowyRachunek.wysokoscRachunku += pozycja.Cena;
                        nowyRachunek.PozycjeNaRachunkus.Add(pozycja);
                    }
                    context.Rachunkis.Add(nowyRachunek);
                    context.SaveChanges();
                    RachunkiModel model = new RachunkiModel
                    {
                        IdRachunku = nowyRachunek.IdRachunku,
                        DataRachunku = nowyRachunek.DataRachunku.Value,
                        Wysokosc = nowyRachunek.wysokoscRachunku.Value,
                        IdKasjera = nowyRachunek.IdRachunku,
                        NazwaKasjera = nowyRachunek.Kasjer.imie + " " + nowyRachunek.Kasjer.nazwisko,
                        Sklad = new List<PozycjeModel>()
                    };
                    foreach (var pozycja in nowyRachunek.PozycjeNaRachunkus)
                    {
                        model.Sklad.Add(new PozycjeModel
                        {
                            Cena = pozycja.Cena.Value,
                            IdPozycji = pozycja.IdPozycji,
                            IdRachunku = pozycja.IdRachunku.Value,
                            Ilosc = pozycja.Ilosc.Value
                        });
                    }

                    return model;
                }
            }
            catch
            {
                return null;
            }
        }

        public List<RachunkiSaveModel> GetPromocje()
        {
            try
            {
                using (DataBase context = new DataBase())
                {
                    var promocje = context.Promocjas.Where(c => c.DataWdrozenia >= DateTime.Now).ToList();
                    List<RachunkiSaveModel> list = new List<RachunkiSaveModel>();
                    list.Add(new RachunkiSaveModel { NazwaPromocji = "Brak promocji", Rabat = 1 });
                    foreach(var promocja in promocje)
                    {
                        list.Add(new RachunkiSaveModel() { NazwaPromocji = promocja.nazwaPromocji, Rabat = promocja.WysokscRabatu.Value });
                    }
                    return list;
                }
            }
            catch
            {
                return null;
            }
        }

        public void Usun(int IdRachunku)
        {
            using (DataBase context = new DataBase())
            {
                var rachunek = context.Rachunkis.SingleOrDefault(c => c.IdRachunku == IdRachunku);

                context.Rachunkis.Remove(rachunek);
                context.SaveChanges();
            }
        }

        public List<RachunkiModel> GetRachunkiList()
        {
            using (DataBase context = new DataBase())
            {
                var rachunki = context.Rachunkis.ToList();
                List<RachunkiModel> toList = new List<RachunkiModel>();
                foreach (var rachunek in rachunki)
                {
                    toList.Add(new RachunkiModel
                    {
                        IdKasjera = rachunek.kasjerID.Value,
                        IdRachunku = rachunek.IdRachunku,
                        Wysokosc = rachunek.wysokoscRachunku.Value,
                        DataRachunku = rachunek.DataRachunku.Value,
                        Sklad = null
                    });
                }
                return toList;
            }
        }

        public RachunkiModel GetRachunek(int IdRachunku)
        {
            using (DataBase context = new DataBase())
            {
                var rachunek = context.Rachunkis.SingleOrDefault(c => c.IdRachunku == IdRachunku);
                if(rachunek ==  null)
                {
                    return null;
                }
                RachunkiModel model = new RachunkiModel
                {
                    IdRachunku = rachunek.IdRachunku,
                    DataRachunku = rachunek.DataRachunku.Value,
                    Wysokosc = rachunek.wysokoscRachunku.Value,
                    IdKasjera = rachunek.IdRachunku,
                    NazwaKasjera = rachunek.Kasjer.imie + " " + rachunek.Kasjer.nazwisko,
                    Sklad = new List<PozycjeModel>()
                };
                foreach(var pozycja in rachunek.PozycjeNaRachunkus)
                {
                    model.Sklad.Add(new PozycjeModel
                    {
                        Cena = pozycja.Cena.Value,
                        IdPozycji = pozycja.IdPozycji,
                        IdRachunku = pozycja.IdRachunku.Value,
                        Ilosc = pozycja.Ilosc.Value
                    });
                }

                return model;
            }
        }

    }//end Obs³ugaRachunku
}